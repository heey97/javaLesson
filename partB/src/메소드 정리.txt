string a.compareTo(b) = 문자열 a에서 b값을(비교)한다
String.format = 포맷형식으로 값 대입
Arrays.toString(a)  배열 a를 작은것부터 정렬





@FuntionalInterface = 함수형 인터페이스 //추상메소드가 1개인지 검사

@Override = 상속이나 인터페이스의 추상 메소드를 재정의 해준다.




인터페이스 구성
추상메소드 abstract
상수
정적메소드 static
default 메소드 = 이미 추상메소드를 사용중인 인터페이스에 새로 추상메소드를 추가할때 에러가 나기때문에 default 메소드를 사용.
                                                                                ㄴ 에러나는이유 인터페이스의 추상메소드를 override 안해줬기때문.


인터페이스중 다형성
CharSequence  char 값을 읽을 수 있는 시퀀스

Comparable Comparator[비교해서 정렬할떄주로사용]

//인터페이스 변수선언x 
//인터페이스 = 추상메소드

//함수형 인터페이스 정의     y=f(x)  도출값y는 함수f의 인자값x
    //인터페이스 중에 *추상메소드가 1개인 것*은 다른 프로그래밍 언어에서 사용되는 `함수` 의 형식으로 표현할 수 있습니다.
    //      함수와 메소드 공통점은 인자와 리턴값이 있다는 것. 다른 점은 메소드는 클래스(또는 객체)에 구성요소로 포함.
    
    //자바 라이브러리에는 인자의 형식과 개수와 리턴 타입 등 여러 유형에 따라 Consumer, Producer(자바8까지 이후 Supplier), Function, Predicate 등의
    //      함수형 인터페이스가 미리 정의되어 있습니다.
    // 자바에서 함수형 인터페이스는 익명클래스 형식으로 많이 사용합니다.

    //@FunctionalInterface         
    //함수형 인터페이스에 사용합니다. 애노테이션이라는 주석으로 `코드를 체크하는 기능`을 합니다.